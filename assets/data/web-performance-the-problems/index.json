{"hash":"413702263bc7ebcc496605691e76f79ce1127a21","data":{"post":{"id":"943671e5cfd598b2d617ea5fed9adb35","title":"Web Performance: The Problems","path":"/web-performance-the-problems/","date":"2019-01-04T00:00:00.000Z","timeToRead":7,"tags":[{"id":"web performance","title":"web performance","path":"/tag/web%20performance/"},{"id":"user experience","title":"user experience","path":"/tag/user%20experience/"}],"description":"No doubt, there’s a ton of reasons why websites are slow, some of which are case-specific. I like to look at these factors from two perspectives...","content":"<p>We’ve learnt already in the first part of this web performance series why\nperformance is important and should be budgeted for at every stage of product\ndevelopment, what benefits it holds for businesses and products, and the\nnegatives of poor performance. Now, let’s talk about the problems of web\nperformance; what makes sites slow.</p>\n<h2 id=\"what-makes-sites-slow\">What makes sites slow?</h2>\n<p>No doubt, there’s a ton of reasons why websites are slow, some of which are\ncase-specific. I like to look at these factors from two perspectives:</p>\n<ul>\n<li>the user perspective</li>\n<li>the developer perspective</li>\n</ul>\n<p>Really, the <em>user</em> and the <em>developer</em> are the two main parties involved in this\ndiscussion; all other factors that impact web performance like the network from\nwhich the site is accessed, the hardware specs of the device, and the software\nfall under the <em>user</em> factor. Same way, developers are responsible for whatever\nimpacts performance on the tech part of it. So, basically, these two guys are\nthe players in this game.</p>\n<p>That being said, in this article, we’ll look at things less from <em>user</em>\nperspective, and focus on the development side because most of the problems come\nfrom there, and to move forward, developers have to build with the users in mind\nand the various real-life situations they could be caught up in because we\ndefinitely can’t control them; we can’t move all our users to a luxury place\nwith super-fast internet connection and great devices — that’s unrealistic. So,\nlet’s jump right into what makes sites on the internet slow today.</p>\n<p>Apart from network, hardware, and software limitations which are user factors,\nlet’s actually talk about the technical causes of poor performance on the front\nend.</p>\n<h3 id=\"1-third-party-resources-and-scripts\">1. Third-party resources and scripts</h3>\n<p>It’s an absolutely normal and almost inevitable practice to have third-party\nresources and scripts on our sites because we most of the time consume\nthird-party content and services whether it’s analytics, ads, social media\nplugins, framework/library resources, we use them.</p>\n<p>However, so many times, the authors of these third-party resources just tell us\nto plug in their resources to our sites: resources that might depend on other\nresources all the way down or might be poorly developed, and then they serve us.\nThe fact, however, remains that most of these assets are the leading cause of\nperformance problems on the web because of course, we didn’t build them, we\ndon’t know how they were built, we do not own them, all we want is their\nservices and we can’t determine the quality of these services, we can only\nassess them and act based on the information.</p>\n<p>It’s sad news that third-party resources today have taken over control of tons\nof sites that they start to have unintended (sometimes malicious) side effects,\nand as developers, most of the time we’re just lazy to take it back. It's very\ncommon to see sites include a huge third-party resource, and then end up using a\nvery minimal portion of it, say 5% e.g including a 20kb library only to end up\nusing a component that’s barely worth a kilobyte. That's usually not a great\nidea as most of these things can easily be implemented in-house with just a\nlittle bit extra work.</p>\n<h3 id=\"2-heavy-assets-and-resources\">2. Heavy assets and resources</h3>\n<p>We all have that one big file on our sites – the one big JavaScript asset\nor the pretty 1MB image from Unsplash. JavaScript is on top of the list of\nfrontend resources that impact performance negatively, followed by images and\nreally, it’s difficult to keep track of these things when everyone is in a rush\nand hell-bent on results so we under-prioritize or forget about optmizing for\nperformance, something that affects our users directly. Users know when your\nsite is slow, they also know most times what sites consume a lot of their mobile\ndata.</p>\n<p>Engineers write code and craft experiences they find pleasing which more often\nthan not is at the expense of the user — forgetting what the user needs and what\nthey perceive to be a great experience. The user has no idea how fancy your code\nis or what shiny new tech you're using, they just want to be able to use your\nproduct and have a great experience doing that. And so, if your site is not\naccessible quickly, you do not even get the chance to show anything to the user.</p>\n<h3 id=\"3-excessive-http-requests\">3. Excessive HTTP Requests</h3>\n<p>Get! Post! Frontend developers, we love to do that a lot: consuming APIs and all\n— it’s fun actually, being able to communicate with a web server, that’s pretty\nincredible, right?</p>\n<p>Well, yes, it is but sure comes at a cost. Sending requests back and forth can\nquickly become overwhelming for a web server to handle. Imagine for a moment\nthat you’re going to get a snack one day at the office and then, a superior\ncalls and says “hey, on your way, please get me some venti iced skinny hazelnut\nmacchiato, sugar-free syrup, extra shot, light ice, no whip coffee”. Extremely\nconfusing, yeah?</p>\n<p>Similar can happen with your server when making requests. If you observe from\nthat order, the entire purpose and what matters to you the most is getting your\nsnack, just the way your users want to <em>use</em> your product — they want to satisfy\nthemselves. Too bad their superior (engineers in this case) took that privilege\naway from them. You know how tough it can be to say no to that – same way\nthe server can’t say no to your multiple requests. It just must (or at least\nattempt to) process the requests regardless of how complicated it is.</p>\n<p>Your user might not need all the junks and stuff you’re fetching for them on the\ninitial load, they need what matters, and you’re in place to answer those\nquestions. Identify the things you’d want to have on your screen quickly if you\nwere the user.</p>\n<h3 id=\"4-poor-code-quality\">4. Poor Code Quality</h3>\n<p>Everyone likes to hop on their computer to start writing code which often gets\nus distracted to the point we forget to ask ourselves essential questions like\n“Am I doing it the right way?”, “Can this be done better?”, “What are the\nimplications of doing it this way?”.</p>\n<p>A lot from the code quality can affect the performance of your site or product\nas an entity. Whether you’re implementing a functionality that should take 10\nlines of code in 50 lines, there’s so much dead code, or you’re just writing the\ncode or using a tool in a way that it’s much slower to function; they all impact\nperformance. For example, having excessive unused code bumps up file sizes which\ncould delay HTTP requests and in turn, affect performance.</p>\n<p>In fact, all the points listed previously in one way or the other fall under the\nquality of code you’re delivering and how knowledgeable a developer might be\nwith regards to performance. Your JavaScript, CSS, HTML and other applications\non the backend contribute to performance directly or indirectly.</p>\n<p>There are some industry standards and practices that should be followed while\nbuilding sites. Don’t write code that “just works™”. You should consider if\nyou’re actually solving that problem in the most efficient way.</p>\n<h2 id=\"5-inadequate-server-resources\">5. Inadequate server resources</h2>\n<p>One critical factor often overlooked is the capabilities of the web server\nbehind a frontend. Nearly all articles and discussions about performance are\nusually focused on the frontend. Now, while that isn't wrong as most of the work\nis usually on the frontend, the server that powers a frontend can also greatly\naffect overall performance.</p>\n<p>I mean, sure, you could have a pretty fast frontend but if your server fails to\nrespond on time, the frontend never even makes it. So, what do I mean? Some\nservers have very high <a href=\"https://web.dev/time-to-first-byte\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TTFB</a> (Time to First\nByte) which is the time it takes for the client get the first byte of response\ndata from a server after an HTTP request, and so if that server's hardware (CPU,\nRAM etc) is inferior or insufficient and it takes long (more than 600ms on an\naverage network) to get a response for just the main document request, that's a\nprolonged page load and so your user just stares at a blank screen for seconds\nwith no sign of progress which can be really frustrating. Now, even when we get\na response for that main document request, subsequent resources like scripts,\ncss and images (all of which point to the server) still have to get their first\nbyte of response data and fully download which can really slow things down.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Now that you have a clearer view on why performance matters and the several\nfactors that influence performance, including a few instances of not-so-good\npractices, in the final part of this series, we’ll talk about known and tested\nstrategies to tackle these problems.</p>\n<p>In summary, how we build what we build matters because that’s a huge part of the\nproduct no matter what it's later transformed to. That’s what we serve users,\nand so priority should be given to what matters to the user, and not how quickly\nwe can achieve something that might not be the best experience for users.</p>\n<h2 id=\"further-reading-and-resources\">Further Reading and Resources…</h2>\n<ul>\n<li><a href=\"https://csswizardry.com/2018/11/css-and-network-performance/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS and Network Performance</a>\nby Harry Roberts</li>\n<li><a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Cost of JavaScript in 2018</a>\nby Addy Osmani</li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/speed-tools/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How To think About Speed Tools</a>\non the Google Developers Blog</li>\n<li><a href=\"https://www.youtube.com/watch?v=4bZvq3nodf4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Progressive Performance</a> by Alex\nRussell</li>\n</ul>\n","cover_image":null},"posts":{"edges":[{"node":{"id":"9d8347b1cb8f5e39ffc53576221f2052","path":"/web-performance-the-big-picture/"}},{"node":{"id":"943671e5cfd598b2d617ea5fed9adb35","path":"/web-performance-the-problems/"}}]}},"context":{}}