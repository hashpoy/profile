{"hash":"884954a8d34ab5a6bb952258bd62551bc8e8bc1f","data":{"post":{"id":"6a288fa6e388724950588deb88273390","title":"Markdown test file","path":"/markdown-test-file/","date":"2019-02-06T00:00:00.000Z","timeToRead":6,"tags":[{"id":"Markdown","title":"Markdown","path":"/tag/Markdown/"},{"id":"Test files","title":"Test files","path":"/tag/Test%20files/"}],"description":"Markdown is intended to be as easy-to-read and easy-to-write as is feasible. Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions.","content":"<p>Markdown is intended to be as easy-to-read and easy-to-write as is\nfeasible.Readability, however, is emphasized above all else. A\nMarkdown-formatted document should be publishable as-is, as plain text, without\nlooking like it's been marked up with tags or formatting instructions.</p>\n<p>While Markdown's syntax has been influenced by several existing text-to-HTML\nfilters -- including\n<a href=\"http://docutils.sourceforge.net/mirror/setext.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Setext</a>,\n<a href=\"http://www.aaronsw.com/2002/atx/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">atx</a>,\n<a href=\"http://textism.com/tools/textile/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Textile</a>,\n<a href=\"http://docutils.sourceforge.net/rst.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reStructuredText</a>,\n<a href=\"http://www.triptico.com/software/grutatxt.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grutatext</a>, and\n<a href=\"http://ettext.taint.org/doc/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">EtText</a> -- the single biggest source of\ninspiration for Markdown's syntax is the format of plain text email.</p>\n<h2 id=\"block-elements\">Block Elements</h2>\n<h3 id=\"paragraphs-and-line-breaks\">Paragraphs and Line Breaks</h3>\n<p>A paragraph is simply one or more consecutive lines of text, separated by one or\nmore blank lines. (A blank line is any line that looks like a blank line -- a\nline containing nothing but spaces or tabs is considered blank.) Normal\nparagraphs should not be indented with spaces or tabs.</p>\n<p>The implication of the \"one or more consecutive lines of text\" rule is that\nMarkdown supports \"hard-wrapped\" text paragraphs. This differs significantly\nfrom most other text-to-HTML formatters (including Movable Type's \"Convert Line\nBreaks\" option) which translate every line break character in a paragraph into a\n<code>&#x3C;br /></code> tag.</p>\n<p>When you <em>do</em> want to insert a <code>&#x3C;br /></code> break tag using Markdown, you end a line\nwith two or more spaces, then type return.</p>\n<h3 id=\"code\">Code</h3>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>count<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span> <span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"headers\">Headers</h3>\n<p>Markdown supports two styles of headers, [Setext][1] and [atx][2].</p>\n<p>Optionally, you may \"close\" atx-style headers. This is purely cosmetic -- you\ncan use this if you think it looks better. The closing hashes don't even need to\nmatch the number of hashes used to open the header. (The number of opening\nhashes determines the header level.)</p>\n<h3 id=\"images\">Images</h3>\n<p>Images are added with <code>![Image Alt](./images/image.jpg)</code></p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1704' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-12bda0ba7908c5ea3e7af1e5df7599d8'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-12bda0ba7908c5ea3e7af1e5df7599d8)' width='2560' height='1704' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAArAEADASIAAhEBAxEB/8QAHAAAAQQDAQAAAAAAAAAAAAAABwECAwUABAYI/8QALxAAAQMDAgQFAgcBAAAAAAAAAQACAwQFEQYhEjFBkRMiUWGhI4EWMkJScXKx4f/EABkBAAIDAQAAAAAAAAAAAAAAAAEEAAIDBf/EACURAAIBBAAFBQEAAAAAAAAAAAABAgMEERIhQUJRkRMUIjFSgf/aAAwDAQACEQMRAD8A8%2bmMkpWwuPRW0dGXHkt%2bnthcRsU00hRZKBtM49FM2kcehXWU1lc7HlPZWtNp1zseT4U%2bPNh1m/pHBtoXH9JUzbe89ESqfSr3Y8nwrKn0c92PpKylDuUdOp2BhS0DgeRVnDQuONkTYNFvwPpHsttukzGMmM9ltGvTjzFp0aj5AmiMkG8tPTj0zLhWtNPVNia6O3QnPI8Z3XEw3uohdmFwY79zWjPdZPeqyYEVFTO8Ho6Qp1wt/wAiandrqCDHdbjFgihpAPc/9Uz79d2Fri2mp2tOdsNH3yh3He5YofDpg2LP5n83u%2b55D2CZNeaqoZwzzulbjGH4dsjpbLoKupfPg6gWrTru4RzeG9lqqjnZnEGu%2bCuibrW%2bNb5LHRN3zkl527rz8%2bra8ecDbup6e5ujlDm1FVGMY4mP3/1UdG2by4ILq3iWFUfhMNeodZaiuFM2CnhhtrQcvdTk8bvbiJ2H8KqGrtXU/CX1XixgYIkha7I7Ia/iGqjx4VzrB/ffHyoajVlz3aK6ST3xstNbWMddFjyYL30p7epx/qOWE2OpSmUk5J%2bVrhKkNmdvRE4kI6jus8Y%2boUPVOCmWDVDzK71WeIfUppGOSVvIKcQYQvGSmknqUhJUZJQbCkf/2Q==' /%3e%3c/svg%3e\" width=\"2560\" alt=\"Image\" data-srcset=\"/shelf/assets/static/alexandr-podvalny-220262-unsplash.82a2fbd.490343832c4705701e26598c1c374606.jpg 480w, /shelf/assets/static/alexandr-podvalny-220262-unsplash.cbab2cf.490343832c4705701e26598c1c374606.jpg 1024w, /shelf/assets/static/alexandr-podvalny-220262-unsplash.2665e34.490343832c4705701e26598c1c374606.jpg 1920w, /shelf/assets/static/alexandr-podvalny-220262-unsplash.42db587.490343832c4705701e26598c1c374606.jpg 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/shelf/assets/static/alexandr-podvalny-220262-unsplash.42db587.490343832c4705701e26598c1c374606.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/shelf/assets/static/alexandr-podvalny-220262-unsplash.42db587.490343832c4705701e26598c1c374606.jpg\" width=\"2560\" alt=\"Image\"></noscript></p>\n<h3 id=\"blockquotes\">Blockquotes</h3>\n<p>Markdown uses email-style <code>></code> characters for blockquoting. If you're familiar\nwith quoting passages of text in an email message, then you know how to create a\nblockquote in Markdown. It looks best if you hard wrap the text and put a <code>></code>\nbefore every line:</p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum\nenim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem\nconsectetuer libero luctus adipiscing.</p>\n</blockquote>\n<p>Markdown allows you to be lazy and only put the <code>></code> before the first line of a\nhard-wrapped paragraph:</p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum\nenim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem\nconsectetuer libero luctus adipiscing.</p>\n</blockquote>\n<p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding\nadditional levels of <code>></code>:</p>\n<blockquote>\n<p>This is the first level of quoting.</p>\n<blockquote>\n<p>This is nested blockquote.</p>\n</blockquote>\n<p>Back to the first level.</p>\n</blockquote>\n<p>Blockquotes can contain other Markdown elements, including headers, lists, and\ncode blocks:</p>\n<blockquote>\n<h2 id=\"this-is-a-header\">This is a header.</h2>\n<ol>\n<li>This is the first list item.</li>\n<li>This is the second list item.</li>\n</ol>\n<p>Here's some example code:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">shell_exec</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"echo <span class=\"token interpolation\"><span class=\"token variable\">$input</span></span> | <span class=\"token interpolation\"><span class=\"token variable\">$markdown_script</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</blockquote>\n<p>Any decent text editor should make email-style quoting easy. For example, with\nBBEdit, you can make a selection and choose Increase Quote Level from the Text\nmenu.</p>\n<h3 id=\"lists\">Lists</h3>\n<p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p>\n<p>Unordered lists use asterisks, pluses, and hyphens -- interchangably -- as list\nmarkers:</p>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ul>\n<p>is equivalent to:</p>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ul>\n<p>and:</p>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ul>\n<p>Ordered lists use numbers followed by periods:</p>\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<p>It's important to note that the actual numbers you use to mark the list have no\neffect on the HTML output Markdown produces. The HTML Markdown produces from the\nabove list is:</p>\n<p>If you instead wrote the list in Markdown like this:</p>\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<p>or even:</p>\n<ol start=\"3\">\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<p>you'd get the exact same HTML output. The point is, if you want to, you can use\nordinal numbers in your ordered Markdown lists, so that the numbers in your\nsource match the numbers in your published HTML. But if you want to be lazy, you\ndon't have to.</p>\n<p>To make lists look nice, you can wrap items with hanging indents:</p>\n<ul>\n<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi\nposuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet\nvitae, risus.</li>\n<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem\nconsectetuer libero luctus adipiscing.</li>\n</ul>\n<p>But if you want to be lazy, you don't have to:</p>\n<ul>\n<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi\nposuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet\nvitae, risus.</li>\n<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem\nconsectetuer libero luctus adipiscing.</li>\n</ul>\n<p>List items may consist of multiple paragraphs. Each subsequent paragraph in a\nlist item must be indented by either 4 spaces or one tab:</p>\n<ol>\n<li>\n<p>This is a list item with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</p>\n<p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec\nsit amet nisl. Aliquam semper ipsum sit amet velit.</p>\n</li>\n<li>Suspendisse id sem consectetuer libero luctus adipiscing.</li>\n</ol>\n<p>It looks nice if you indent every line of the subsequent paragraphs, but here\nagain, Markdown will allow you to be lazy:</p>\n<ul>\n<li>\n<p>This is a list item with two paragraphs.</p>\n<pre class=\"language-text\"><code class=\"language-text\">This is the second paragraph in the list item. You&#39;re</code></pre>\n<p>only required to indent the first line. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit.</p>\n</li>\n<li>Another item in the same list.</li>\n</ul>\n<p>To put a blockquote within a list item, the blockquote's <code>></code> delimiters need to\nbe indented:</p>\n<ul>\n<li>\n<p>A list item with a blockquote:</p>\n<blockquote>\n<p>This is a blockquote inside a list item.</p>\n</blockquote>\n</li>\n</ul>\n<p>To put a code block within a list item, the code block needs to be indented\n<em>twice</em> -- 8 spaces or two tabs:</p>\n<ul>\n<li>\n<p>A list item with a code block:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;code goes here&gt;</code></pre>\n</li>\n</ul>\n<h3 id=\"code-blocks\">Code Blocks</h3>\n<p>Pre-formatted code blocks are used for writing about programming or markup\nsource code. Rather than forming normal paragraphs, the lines of a code block\nare interpreted literally. Markdown wraps a code block in both <code>&#x3C;pre></code> and\n<code>&#x3C;code></code> tags.</p>\n<p>To produce a code block in Markdown, simply indent every line of the block by at\nleast 4 spaces or 1 tab.</p>\n<p>This is a normal paragraph:</p>\n<pre class=\"language-text\"><code class=\"language-text\">This is a code block.</code></pre>\n<p>Here is an example of AppleScript:</p>\n<pre class=\"language-applescript\"><code class=\"language-applescript\"><span class=\"token keyword\">tell</span> <span class=\"token class builtin\">application</span> <span class=\"token string\">\"Foo\"</span>\n  beep\n<span class=\"token keyword\">end</span> <span class=\"token keyword\">tell</span></code></pre>\n<p>A code block continues until it reaches a line that is not indented (or the end\nof the article).</p>\n<p>Within a code block, ampersands (<code>&#x26;</code>) and angle brackets (<code>&#x3C;</code> and <code>></code>) are\nautomatically converted into HTML entities. This makes it very easy to include\nexample HTML source code using Markdown -- just paste it and indent it, and\nMarkdown will handle the hassle of encoding the ampersands and angle brackets.\nFor example, this:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token entity named-entity\" title=\"&copy;\">&amp;copy;</span> 2004 Foo Corporation\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Regular Markdown syntax is not processed within code blocks. E.g., asterisks are\njust literal asterisks within a code block. This means it's also easy to use\nMarkdown to write about Markdown's own syntax.</p>\n<pre class=\"language-ruby\"><code class=\"language-ruby\">tell application <span class=\"token string\">\"Foo\"</span>\n    beep\n<span class=\"token keyword\">end</span> tell</code></pre>\n<h2 id=\"span-elements\">Span Elements</h2>\n<h3 id=\"links\">Links</h3>\n<p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p>\n<p>In both styles, the link text is delimited by [square brackets].</p>\n<p>To create an inline link, use a set of regular parentheses immediately after the\nlink text's closing square bracket. Inside the parentheses, put the URL where\nyou want the link to point, along with an <em>optional</em> title for the link,\nsurrounded in quotes. For example:</p>\n<p>This is <a href=\"http://example.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">an example</a> inline link.</p>\n<p><a href=\"http://example.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">This link</a> has no title attribute.</p>\n<h3 id=\"emphasis\">Emphasis</h3>\n<p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis.\nText wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&#x3C;em></code> tag; double\n<code>*</code>'s or <code>_</code>'s will be wrapped with an HTML <code>&#x3C;strong></code> tag. E.g., this input:</p>\n<p><em>single asterisks</em></p>\n<p><em>single underscores</em></p>\n<p><strong>double asterisks</strong></p>\n<p><strong>double underscores</strong></p>\n<h3 id=\"code-1\">Code</h3>\n<p>To indicate a span of code, wrap it with backtick quotes (<code>`</code>). Unlike a\npre-formatted code block, a code span indicates code within a normal paragraph.\nFor example:</p>\n<p>Use the <code>printf()</code> function.</p>\n","cover_image":null},"posts":{"edges":[{"node":{"id":"4cb644cd7aa080066bf9fc7793f6f379","path":"/building-a-backtest-trading-app-with-flask/"}},{"node":{"id":"e3e5cffc73f0fae95747925bd3ae57f2","path":"/i-built-an-engineering-calculator-app-using-react-native/"}},{"node":{"id":"4092795b837fef7e2c8fcec7e05dd788","path":"/how-to-use-serp-analysis-in-seo-ranking/"}},{"node":{"id":"dbb887be711cb7ee6358a8ecf46a451e","path":"/i-built-an-automated-data-mining-chrome-extension-and-extract-valuable-insights-from-data-using-tableau/"}}]}},"context":{}}